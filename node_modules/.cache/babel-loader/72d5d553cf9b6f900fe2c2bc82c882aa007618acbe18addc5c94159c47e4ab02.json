{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hannah\\\\Desktop\\\\Coding\\\\appointment-planner\\\\src\\\\containers\\\\contactsPage\\\\ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {} = _ref;\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n\n  const contacts = props.contacts;\n  const addContact = props.addContact;\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [email, setEmail] = useState('');\n  const [isDuplicate, setIsDuplicate] = useState(false);\n\n  // const handleContactChange = (event) => {\n  //   const { name, value } = event.target;\n  //   setContactInfo((prevContactInfo) => ({\n  //     ...prevContactInfo,\n  //     [name]: value,\n  //   }));\n  // };\n\n  // useEffect(() => {\n  //   const isDuplicateName = contacts.some((contact) => contact.name === contactInfo.name);\n  //   setIsDuplicate(isDuplicateName);\n  // }, [contactInfo.name, contacts]);\n\n  // console.log()\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!isDuplicate) {\n      addContact(name, phone, email);\n      setName(\"\");\n      setPhone(\"\");\n      setEmail(\"\");\n    }\n  };\n  useEffect(() => {\n    const isDuplicateName = () => {\n      //   contacts.some((contact) => contact.name === contactInfo.name);\n      //   setIsDuplicate(isDuplicateName);\n      // }, [contactInfo.name, contacts]);\n\n      const found = contacts.find(contact => contact.name === name);\n      if (found !== undefined) {\n        return true;\n      }\n      return false;\n    };\n    if (isDuplicateName()) {\n      setIsDuplicate(true);\n    } else {\n      setIsDuplicate(false);\n    }\n  }, [name, contacts, isDuplicate]);\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: name,\n        setName: setName,\n        email: email,\n        setEmail: setEmail,\n        phone: phone,\n        setPhone: setPhone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tiles: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"RdI3LyrKuvO9Gqn84BBEmFcaw4Y=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contacts","props","addContact","name","setName","phone","setPhone","email","setEmail","isDuplicate","setIsDuplicate","handleSubmit","e","preventDefault","isDuplicateName","found","find","contact","undefined","children","fileName","_jsxFileName","lineNumber","columnNumber","tiles","_c","$RefreshReg$"],"sources":["C:/Users/Hannah/Desktop/Coding/appointment-planner/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ( {} ) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n\r\n\r\n  const contacts = props.contacts;\r\n  const addContact = props.addContact;\r\n\r\n\r\n\r\n  const [name, setName] = useState('')\r\n  const [phone, setPhone] = useState('')\r\n  const [email, setEmail] = useState('')\r\n\r\n\r\n  const [isDuplicate, setIsDuplicate] = useState(false);\r\n  \r\n  // const handleContactChange = (event) => {\r\n  //   const { name, value } = event.target;\r\n  //   setContactInfo((prevContactInfo) => ({\r\n  //     ...prevContactInfo,\r\n  //     [name]: value,\r\n  //   }));\r\n  // };\r\n\r\n\r\n\r\n  // useEffect(() => {\r\n  //   const isDuplicateName = contacts.some((contact) => contact.name === contactInfo.name);\r\n  //   setIsDuplicate(isDuplicateName);\r\n  // }, [contactInfo.name, contacts]);\r\n  \r\n  // console.log()\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!isDuplicate) {\r\n      addContact(name, phone, email);\r\n      setName(\"\");\r\n      setPhone(\"\");\r\n      setEmail(\"\");\r\n      \r\n        } \r\n    };\r\n\r\n    \r\n  useEffect(() => {\r\n    const isDuplicateName = () => {\r\n  //   contacts.some((contact) => contact.name === contactInfo.name);\r\n  //   setIsDuplicate(isDuplicateName);\r\n  // }, [contactInfo.name, contacts]);\r\n\r\n      const found = contacts.find((contact) => contact.name === name);\r\n      if (found !== undefined) {\r\n        return true;\r\n      }\r\n      return false\r\n    };\r\n\r\n    if (isDuplicateName()) {\r\n      setIsDuplicate(true);\r\n    } else {\r\n      setIsDuplicate(false);\r\n    }\r\n  }, [name, contacts, isDuplicate]);\r\n    \r\n    \r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm \r\n          name={name}\r\n          setName={setName}\r\n          email={email}\r\n          setEmail={setEmail}\r\n          phone={phone}\r\n          setPhone={setPhone}\r\n        />\r\n\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList tiles={contacts} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}