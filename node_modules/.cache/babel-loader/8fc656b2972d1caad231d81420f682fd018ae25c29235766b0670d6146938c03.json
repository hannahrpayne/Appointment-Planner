{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hannah\\\\Desktop\\\\Coding\\\\appointment-planner\\\\src\\\\containers\\\\contactsPage\\\\ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = props => {\n  _s();\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n\n  const contacts = props.contacts;\n  const addContact = props.addContact;\n  const [contactInfo, setContactInfo] = useState({\n    name: '',\n    phone: '',\n    email: ''\n  });\n  const [isDuplicate, setIsDuplicate] = useState(false);\n\n  // const handleContactChange = (event) => {\n  //   const { name, value } = event.target;\n  //   setContactInfo((prevContactInfo) => ({\n  //     ...prevContactInfo,\n  //     [name]: value,\n  //   }));\n  // };\n\n  useEffect(() => {\n    const isDuplicateName = contacts.some(contact => contact.name === contactInfo.name);\n    setIsDuplicate(isDuplicateName);\n  }, [contactInfo.name, contacts]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n\n    if (!isDuplicate) {\n      addContact(contactInfo);\n      setContactInfo({\n        name: '',\n        phone: '',\n        email: ''\n      });\n    } else {\n      // Optionally, handle the case where the name is a duplicate\n      alert('Duplicate contact name. Please provide a unique name.');\n    }\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"n9ifM75ozRgX+0dB9Xav6RQ1QPs=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","props","_s","contacts","addContact","contactInfo","setContactInfo","name","phone","email","isDuplicate","setIsDuplicate","isDuplicateName","some","contact","handleSubmit","e","preventDefault","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Hannah/Desktop/Coding/appointment-planner/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n\r\n\r\n  const contacts = props.contacts;\r\n  const addContact = props.addContact;\r\n\r\n  const [contactInfo, setContactInfo] = useState({\r\n    name: '',\r\n    phone: '',\r\n    email: '',\r\n  });\r\n\r\n  const [isDuplicate, setIsDuplicate] = useState(false);\r\n  \r\n  // const handleContactChange = (event) => {\r\n  //   const { name, value } = event.target;\r\n  //   setContactInfo((prevContactInfo) => ({\r\n  //     ...prevContactInfo,\r\n  //     [name]: value,\r\n  //   }));\r\n  // };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const isDuplicateName = contacts.some((contact) => contact.name === contactInfo.name);\r\n    setIsDuplicate(isDuplicateName);\r\n  }, [contactInfo.name, contacts]);\r\n  \r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n\r\n    if (!isDuplicate) {\r\n      addContact(contactInfo);\r\n\r\n      setContactInfo({\r\n      name: '',\r\n      phone: '',\r\n      email: ''\r\n    })\r\n    } else {\r\n      // Optionally, handle the case where the name is a duplicate\r\n      alert('Duplicate contact name. Please provide a unique name.');\r\n    }\r\n\r\n    \r\n    \r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        \r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACrC;AACF;AACA;AACA;;EAGE,MAAMC,QAAQ,GAAGF,KAAK,CAACE,QAAQ;EAC/B,MAAMC,UAAU,GAAGH,KAAK,CAACG,UAAU;EAEnC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC;IAC7Ca,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACA;EACA;EACA;EACA;EACA;EACA;;EAIAC,SAAS,CAAC,MAAM;IACd,MAAMiB,eAAe,GAAGT,QAAQ,CAACU,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACP,IAAI,KAAKF,WAAW,CAACE,IAAI,CAAC;IACrFI,cAAc,CAACC,eAAe,CAAC;EACjC,CAAC,EAAE,CAACP,WAAW,CAACE,IAAI,EAAEJ,QAAQ,CAAC,CAAC;EAGhC,MAAMY,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAClB;AACJ;AACA;AACA;;IAEI,IAAI,CAACP,WAAW,EAAE;MAChBN,UAAU,CAACC,WAAW,CAAC;MAEvBC,cAAc,CAAC;QACfC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,KAAK,EAAE;MACT,CAAC,CAAC;IACF,CAAC,MAAM;MACL;MACAS,KAAK,CAAC,uDAAuD,CAAC;IAChE;EAIF,CAAC;;EAED;AACF;AACA;AACA;;EAEE,oBACEnB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,eACEpB,OAAA;QAAAoB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAEZ,eACVxB,OAAA;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACNxB,OAAA;MAAAoB,QAAA,eACEpB,OAAA;QAAAoB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACT;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEV,CAAC;AAACrB,EAAA,CA3EWF,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}