{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hannah\\\\Desktop\\\\Coding\\\\appointment-planner\\\\src\\\\containers\\\\contactsPage\\\\ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = props => {\n  _s();\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n\n  const contacts = props.contacts;\n  const addContact = props.addContact;\n  const [contactInfo, setContactInfo] = useState({\n    name: '',\n    phone: '',\n    email: ''\n  });\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [email, setEmail] = useState('');\n  const [isDuplicate, setIsDuplicate] = useState(false);\n\n  // const handleContactChange = (event) => {\n  //   const { name, value } = event.target;\n  //   setContactInfo((prevContactInfo) => ({\n  //     ...prevContactInfo,\n  //     [name]: value,\n  //   }));\n  // };\n\n  // useEffect(() => {\n  //   const isDuplicateName = contacts.some((contact) => contact.name === contactInfo.name);\n  //   setIsDuplicate(isDuplicateName);\n  // }, [contactInfo.name, contacts]);\n\n  // console.log()\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!isDuplicate) {\n      addContact(name, phone, email);\n      setName(\"\");\n      set;\n    }\n  };\n  useEffect(() => {\n    const isDuplicateName = () => {\n      //   contacts.some((contact) => contact.name === contactInfo.name);\n      //   setIsDuplicate(isDuplicateName);\n      // }, [contactInfo.name, contacts]);\n\n      const found = contacts.find(contact => contact.name === contactInfo.name);\n      if (found !== undefined) {\n        return true;\n      }\n      return false;\n    };\n    if (isDuplicateName()) {\n      setIsDuplicate(true);\n    } else {\n      setIsDuplicate(false);\n    }\n  }, [contactInfo.name, contacts, isDuplicate]);\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: contactInfo.name,\n        setName: setContactInfo.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tiles: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"Ia9DUzbXec79JElXERMDnK+7lfU=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","props","_s","contacts","addContact","contactInfo","setContactInfo","name","phone","email","setName","setPhone","setEmail","isDuplicate","setIsDuplicate","handleSubmit","e","preventDefault","set","isDuplicateName","found","find","contact","undefined","children","fileName","_jsxFileName","lineNumber","columnNumber","tiles","_c","$RefreshReg$"],"sources":["C:/Users/Hannah/Desktop/Coding/appointment-planner/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n\r\n\r\n  const contacts = props.contacts;\r\n  const addContact = props.addContact;\r\n\r\n  const [contactInfo, setContactInfo] = useState({\r\n    name: '',\r\n    phone: '',\r\n    email: '',\r\n  });\r\n\r\n  const [name, setName] = useState('')\r\n  const [phone, setPhone] = useState('')\r\n  const [email, setEmail] = useState('')\r\n\r\n\r\n  const [isDuplicate, setIsDuplicate] = useState(false);\r\n  \r\n  // const handleContactChange = (event) => {\r\n  //   const { name, value } = event.target;\r\n  //   setContactInfo((prevContactInfo) => ({\r\n  //     ...prevContactInfo,\r\n  //     [name]: value,\r\n  //   }));\r\n  // };\r\n\r\n\r\n\r\n  // useEffect(() => {\r\n  //   const isDuplicateName = contacts.some((contact) => contact.name === contactInfo.name);\r\n  //   setIsDuplicate(isDuplicateName);\r\n  // }, [contactInfo.name, contacts]);\r\n  \r\n  // console.log()\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!isDuplicate) {\r\n      addContact(name, phone, email);\r\n      setName(\"\");\r\n      set\r\n      \r\n        } \r\n    };\r\n\r\n    \r\n  useEffect(() => {\r\n    const isDuplicateName = () => {\r\n  //   contacts.some((contact) => contact.name === contactInfo.name);\r\n  //   setIsDuplicate(isDuplicateName);\r\n  // }, [contactInfo.name, contacts]);\r\n\r\n      const found = contacts.find((contact) => contact.name === contactInfo.name);\r\n      if (found !== undefined) {\r\n        return true;\r\n      }\r\n      return false\r\n    };\r\n\r\n    if (isDuplicateName()) {\r\n      setIsDuplicate(true);\r\n    } else {\r\n      setIsDuplicate(false);\r\n    }\r\n  }, [contactInfo.name, contacts, isDuplicate]);\r\n    \r\n    \r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm \r\n          name={contactInfo.name}\r\n          setName={setContactInfo.name}\r\n        />\r\n\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList tiles={contacts} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}